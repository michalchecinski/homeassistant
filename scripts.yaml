  off_all:
    alias: "Turn off all"
    sequence:
      - service: switch.turn_off
        data:
          entity_id: 
            - switch.b3
            - light.rtv_led
            - light.bed_lamp
            - switch.stereo

  iron_turn_off:
    alias: "Turn off iron after 20 minutes of use"
    sequence:
      - delay:
          minutes: 20
      - service: switch.turn_off
        data:
          entity_id: switch.b3
      - service: script.turn_on
        entity_id: script.say
        data:
          variables:
            volume: '0.8'
            what: 'Żelazko wyłączone'

  # notify_temperature_dead:
  #   alias: "Send notification when outside temperature sensor isn't sending data after 30 minutes"
  #   sequence:
  #     - delay:
  #         minutes: 46
  #     - service: script.ifttt_notify
  #       data_template:
  #         message: "Outside temperature battery dead"
  
  ifttt_notify:
    sequence:
      - service: ifttt.trigger
        data_template: {"event":"hass_notify", "value1":"{{ message }}", "value2":"{{ info }}"}

  say:
    alias: Google Home TTS
    sequence:
      - service: media_player.volume_set
        data_template:
          entity_id:  media_player.living_room_speaker
          volume_level: "{{ volume }}"
      - service: tts.google_say
        data_template:
          entity_id:  media_player.living_room_speaker
          message: "{{ what }}"
      - delay: '00:00:30'
      - service: media_player.volume_set
        data_template:
          entity_id:  media_player.living_room_speaker
          volume_level: 0.5

  # notify_thinkpad:
  #   sequence:
  #     - service: mqtt.publish
  #       data_template:
  #         payload: "{{ message }}"
  #         topic: THINKPAD/toast
  #         retain: true

  # notify_thinkpad_tts:
  #   sequence:
  #     - service: mqtt.publish
  #       data_template:
  #         payload: "{{ message }}"
  #         topic: THINKPAD/tts
  #         retain: true

  romantic_on:
    alias: Romantic on
    sequence:
      - service: switch.turn_on
        data:
          entity_id: switch.stereo
      - service: media_player.volume_set
        data:
          entity_id: media_player.living_room_speaker
          volume_level: "0.2"
      - service: media_player.volume_set
        data:
          entity_id: media_player.spotify
          volume_level: "0.15"
      - service: media_player.shuffle_set
        data:
          entity_id: media_player.spotify
          shuffle: true
      - service: script.spotify_play_playlist
        data_template:
          playlist: "spotify:user:checin:playlist:6f4TfHpSuNFBaJnWxfqE2w"
      # - condition: sun
      #   after: sunset
      - service: light.turn_on
        data:
          entity_id: light.rtv_led

  romantic_off:
    alias: Romantic off
    sequence:
      - service: light.turn_off
        data:
          entity_id: light.rtv_led
      - service: switch.turn_off
        data:
          entity_id: switch.stereo
      - service: media_player.media_pause
        data:
          entity_id: media_player.spotify
      - service: media_player.clear_playlist
        data:
          entity_id: media_player.spotify
      - delay: '00:01:00'
      - service: media_player.volume_set
        data_template:
          entity_id:  media_player.living_room_speaker
          volume_level: "0.5"

  romantic_dance_on:
    alias: Romantic dance on
    sequence:
      - service: switch.turn_on
        data:
          entity_id: switch.stereo
      - service: media_player.volume_set
        data:
          entity_id: media_player.living_room_speaker
          volume_level: "0.2"
      - service: script.spotify_play_song
        data_template:
          song: "spotify:track:0Tel1fmuCxEFV6wBLXsEdk"
      - service: media_player.volume_set
        data:
          entity_id: media_player.spotify
          volume_level: "0.15"
      # - condition: sun
      #   after: sunset
      - service: light.turn_on
        data:
          entity_id: light.rtv_led

  spotify_play_playlist:
    alias: Spotify play playlist
    sequence:
      - service: switch.turn_on
        data:
          entity_id: switch.stereo
      - service: media_player.select_source
        data:
          entity_id: media_player.spotify
          source: stereo
      - service: media_player.play_media
        data_template:
          entity_id: media_player.spotify
          media_content_type: playlist
          media_content_id: "{{ playlist }}"

  spotify_play_song:
    alias: Spotify play song
    sequence:
      - service: switch.turn_on
        data:
          entity_id: switch.stereo
      - service: media_player.select_source
        data:
          entity_id: media_player.spotify
          source: stereo
      - service: media_player.play_media
        data_template:
          entity_id: media_player.spotify
          media_content_type: music
          media_content_id: "{{ song }}"

  stereo_on:
    alias: "Stereo on"
    sequence:
      - condition: state
        entity_id: switch.stereo_mqtt
        state: 'off'
      - service: switch.turn_on
        data:
          entity_id: switch.stereo_mqtt

  stereo_off:
    alias: "Stereo off"
    sequence:
      - condition: state
        entity_id: switch.stereo_mqtt
        state: 'on'
      - service: switch.turn_off
        data:
          entity_id: switch.stereo_mqtt


# vacuum simulation - delete after real vacuum comes
  vacuum_start:
    sequence:
      - service: input_boolean.turn_off
        data_template:
          entity_id: input_boolean.vacuum_finished
      - delay:
          hours: 2
