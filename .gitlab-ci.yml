
stages:
  - staticcheck
  - homeassistant
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Generic staticcheck template
.staticcheck: &staticcheck
  stage: staticcheck
  tags:
    - docker

# Generic Home Assistant template
.ha: &ha
  stage: homeassistant
  variables:
    PYTHONPATH: "/usr/src/app:$PYTHONPATH"
  before_script:
    - python -m homeassistant --version
    - cp -a $CI_PROJECT_DIR/homeassistant/.stubs/. $CI_PROJECT_DIR/homeassistant/
  script:
    - |
      python -m homeassistant \
        --config $CI_PROJECT_DIR/homeassistant \
        --script check_config \
        --info all
  tags:
    - docker

shellcheck:
  <<: *staticcheck
  image:
    name: koalaman/shellcheck-alpine:stable
    entrypoint: [""]
  before_script:
    - shellcheck --version
  script:
    - |
      for file in $(grep -IRl "#\!\(/usr/bin/env \|/bin/\)" --exclude-dir ".git" .); do
        if ! shellcheck -x $file; then
          export FAILED=1
        else
          echo "$file OK"
        fi
      done
      if [ "${FAILED}" = "1" ]; then
        exit 1
      fi

yamllint:
  <<: *staticcheck
  image: sdesbure/yamllint
  before_script:
    - yamllint --version
  script:
    - yamllint .
  # allow_failure: true

python:
  <<: *staticcheck
  image:
    name: alpine:latest
    entrypoint: [""]
  before_script:
    - pip install --upgrade pip flake8 mypy typed_ast
  script:
    - flake8 ./scripts
    - mypy --ignore-missing-imports ./scripts

# Home Assistant test jobs
ha-latest:
  <<: *ha
  image:
    name: homeassistant/home-assistant:latest
    entrypoint: [""]

ha-rc:
  <<: *ha
  image:
    name: homeassistant/home-assistant:rc
    entrypoint: [""]
  allow_failure: true

ha-dev:
  <<: *ha
  image:
    name: homeassistant/home-assistant:dev
    entrypoint: [""]
  allow_failure: true

deploy:
  stage: deploy
  image:
    name: alpine:latest
    entrypoint: [""]
  environment:
    name: home-assistant
  before_script:
    - apk --no-cache add openssh-client
    - echo "$DEPLOYMENT_SSH_KEY" > id_rsa
    - chmod 600 id_rsa
  script:
    - ssh -i id_rsa -o "StrictHostKeyChecking=no" $(SERV_SSH_LOGIN) "ssh $(DEPLOYMENT_SSH_LOGIN)"
  after_script:
    - rm id_rsa
  only:
    refs:
      - master
  tags:
    - docker

# docker-deploy:
#   stage: docker-deploy
#   image:
#     name: alpine:latest
#     entrypoint: [""]
#   environment:
#     name: home-assistant
#   before_script:
#     - apk --no-cache add openssh-client
#     - echo "$DEPLOYMENT_SSH_KEY" > id_rsa
#     - chmod 600 id_rsa
#   script:
#     - ssh -i id_rsa -o "StrictHostKeyChecking=no" $DEPLOYMENT_SSH_LOGIN "cd /mnt/docker-data/home-assistant && ./update.sh"
#   after_script:
#     - rm id_rsa
#   only:
#     refs:
#       - master
#     changes:
#       - docker-compose.yml
#       - update.sh
#   tags:
#     - docker

# restart-hass:
#   stage: postflight
#   image:
#     name: alpine:latest
#     entrypoint: [""]
#   environment:
#     name: home-assistant
#   before_script:
#     - apk --no-cache add curl
#   script:
#     - "curl -X POST -H \"Authorization: Bearer $DEPLOYMENT_HASS_TOKEN\" -H \"Content-Type: application/json\" $DEPLOYMENT_HASS_URL/api/services/homeassistant/restart"
#   only:
#     refs:
#       - master
#   except:
#     changes:
#       - docker-compose.yml
#       - update.sh
#   tags:
#     - docker
